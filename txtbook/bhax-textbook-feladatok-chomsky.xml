<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
        </para>
              <programlisting language="c"><![CDATA[#include <stdio.h>
			int main(){
			int n;
			printf("Adjon meg egy szamot: ");
			scanf("%d", &n);
			for(int i=0;i<n;i++)
			{
                                if(i%5==0 && i!=0) printf(" ");
                                if(i%50==0)
                                printf("\n");
                                printf("I");
			}
                        printf("\n");
			return 0;
			}]]></programlisting>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="turing.png"/>
                </imageobject>
                <textobject>
                    <phrase>Turing ábra</phrase>
                </textobject>
            </inlinemediaobject>                
        </para>
        
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A Turing gép egy matematikai modellje a számításnak ami definiál egy absztrakt gépet, mely szimbólumokat
            manipulál egy szalagon miközben több feltételt kielégít. A Turing gépet Alan Turing találta fel 1936-ban.
            Ő egy "a-machine"(automatic machine)-automata gépnek nevezte. Ezzel a modellel képes volt két esszenciális 
            kérdésre válaszolni: létezik e egy olyan gép, mely meg tudja határozni, hogy az éppen elvégzésben levő feladat
            "körkörös"(pl.lefagyott, vagy nem tudja folytatni számításait); ugyanakkor létezik e egy olyan gép, amely meg tudja
            határozni, hogy a szalagján levő gép valaha is nyomtat e egy adott szimbólumot.
            
         </para>
        <para>
            Ebben a példában decimálisból unárisba úgy váltjuk a számokat, hogy amennyi a decimális szám annyiszor 
            hajtunk végbe egy ismétlő ciklust és annyi ugyanannyi darab I karaktert fogunk a képernyőre íratni 
            ötössével elválasztva.
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
            </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
                <programlisting ><![CDATA[
                    S, X, Y legyenek változók
                    a, b ,c legyenek konstansok
                    
                    S->abc, S->aXbc, Xb->bX, Xc->Ybcc, bY->Yb, aY->aaX, aY->aa
                    
                    S (S->aXbc)
                    aXbc (Xb->bX)
                    abXc (Xc->Ybcc)
                    abYbcc (bY->Yb)
                    AYbbcc (aY->aa)
                    aabbcc
                ]]></programlisting>        
        </para>
         <para>
                <programlisting><![CDATA[
                    A, B, C legyenek változók
                    a, b ,c legyenek konstansok
                    
                    A->aAB, A->aC, CB->bCc, cB->Bc, C->bc
                    
                    A (A->aAB)
                    aAB (A->aC)
                    aaCB (CB->bCc)
                    aabCc (C->bc)
                    aabbcc
                ]]></programlisting>        
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A fent leírt generatív nyelvtan és Chomsky-hierarchia kidolgozása, Noam Chomsky amerikai nyelvész kutató nevéhez fűződik.
            Ezt a modellt formális nyelvek létrehozására használják. Az alapján működik, hogy a nyelv részit kifejezőerő szerint
            osztályozza, és az erősebb osztályok elemei a gyengébb osztályok elemeinek létrehozására képesek.
        </para>
        <para>
            A generatív nyelvtannak négy fontos eleme van: terminális szimbólumok(konstansok), nem terminális jelek(változók),
            kezdőszimbólum(egy kitűntetett szimbólum 'S') és helyettesítési szabályok.
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <programlisting><![CDATA[#include <stdio.h>
int main()
{
	for(int i=0;i<5;i++)
		printf("o");
	return 0;
}]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A következő módon néz ki a C utasítás fogalma ha BNF-ben definiáljuk:
        </para>
        <programlisting><![CDATA[
<utasítás> ::=
               <címkézett utasítás>    ::= <azonosító> | "case" | "default"
               <kifejezésutasítás>     ::= <kifejezés>
               <öszetett utasítás>     ::= <deklarációs lista> | <utasítás lista>
               <kiválasztó utasítás>   ::= "if" | "if else" | "switch"
               <iterációs utasítás>    ::= "while" | "do while" | "for"
               <vezérlésátadó utasítás>::= "goto" | "continue" | "break" | "return"
            ]]></programlisting>
        <para>
            Fentébb szerepel az a kódcsipet mely nem fordul le C89-es szabvánnyal, C99-el viszont igen, mivel változó deklarálása
            C89 es szabványba nem szerepelhetett a for ciklus argumentumai között.
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <programlisting><![CDATA[%{
#include <stdio.h>
int realnumbers = 0;
%}
digit	[0-9]
%%
{digit}*(\.{digit}+)?	{++realnumbers; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%
int
main ()
{
 yylex ();
 printf("The number of real numbers is %d\n", realnumbers);
 return 0;
}]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A forráskód három fő részből áll, és a dupla % jelek választják őket külön.
        </para>
        <itemizedlist mark="disc">
            <listitem>
                <para>
                    Az elsőben találjuk a definíciókat, ide olyan dolgokat tehetünk mint például a változók.
                </para>
            </listitem>
            <listitem>
                <para>
                    A második részbe a szabályokat tesszük, megadjuk a regExp-t. Ebben a példában valós számokat keresünk ezért
                    digit-et használunk a szabályba melyetet megkülönböztet abban az esetben a pont van előtte, ilyen esetben
                    tizedes szám lesz belőle.
                </para>
            </listitem>
            <listitem>
                <para>
                    A harmadik részbe pedig felhasználói kód kerülhet, ilyen például a valós számok számának a kiíratása.
                </para>
            </listitem>
        </itemizedlist>

    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <programlisting><![CDATA[%{
#include <stdio.h>
%}
%%
[A-Za-z]+ {char betu[strlen(yytext)];
strcpy(betu,yytext);
int i;
for(i=0;i<strlen(yytext);i++){
if(betu[i]=='a'||betu[i]=='A')printf("4");
else if(betu[i]=='i'||betu[i]=='I'||betu[i]=='l'||betu[i]=='L')printf("1");
else if(betu[i]=='e'||betu[i]=='E')printf("3");
else if(betu[i]=='b'||betu[i]=='B')printf("8");
else if(betu[i]=='g'||betu[i]=='G')printf("9");
else if(betu[i]=='o'||betu[i]=='O')printf("0");
else if(betu[i]=='r'||betu[i]=='R'||betu[i]=='z'||betu[i]=='Z')printf("2");
else if(betu[i]=='s'||betu[i]=='S')printf("5");
else if(betu[i]=='t'||betu[i]=='T')printf("7");
else printf("%c",betu[i]);}
} 
%%
int main()
{
yylex();
return 0;
} ]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Az előző feladat megoldása alapján lett létrehozva ez a 1337 cipher, mely végig megy az inputon és kicserél minden
            egyes karaktert melynek létezik egy megfelelője a leet 48c-ből.
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
                <para>
                    Ismétlő utasítás mely ötször fog ismétlődni, nem jelent bug forrást.
                </para>
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting> 
                <para>
                    Ismétlő utasítás mely ötször fog ismétlődni, nem jelent bug forrást.
                </para>           
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting> 
                <warning>
                    <title>Bug</title>
                <para>
                    Ismétlő utasítás mely ötször fog ismétlődni, viszont amennyiben a tömböt is szeretnénk használni
                    ez egy jelentős bug forrást jelent.
                </para>
                </warning>       
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>
                <warning><title>Bug</title>
                <para>
                    Tekintve, hogy a for ciklusban szereplő argumentum második fele nem egy logikai kifejezés, 
                    hanem egy pointer értékének a változtatása, ez egy bug forrást jelenthet.
                </para>   
                </warning>             
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>
                <warning><title>Bug</title>
                <para>
                    A printf-ben szereplő f függvény visszatérési értékét írja ki a függvény kétszer, viszont
                    nincs meghatározva C-ben, hogy az a értéke milyen sorrendben van növelve ezért ez egy jelentős
                    bug forrás.
                </para>
                </warning>            
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting> 
                <para>
                    A programrészlet kiírja az f függvény által visszatérített értéket és az a változó értékét.
                </para>           
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting> 
                <para>
                    A printf kiírja az f függvény által visszatérített értéket megváltoztathatja az a értékét
                    és kiírja az eredeti a értéket.
                </para>           
            </listitem>
        </orderedlist>
       <!-- <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> -->

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            1. Minden x-re létezik egy nála nagyobb y ami prím.
            2. Minden x létezik egy annál nagyobb ikerprímszám.
            3. Van olyan y amelynél minden x prím kisebb.
            4. Van olyan y amelynél bármely nagyobb szám nem prímszám.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>  
                <programlisting><![CDATA[
                    int a=5;
                ]]></programlisting>                      
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>
                <programlisting><![CDATA[
                    int *a= &b;
                ]]></programlisting>                         
            </listitem>
            <listitem>
                <para>egész referenciája</para> 
                <programlisting><![CDATA[
                    int &a=b;
                ]]></programlisting>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>
                <programlisting><![CDATA[
                    int v[5]={1,2,3,4,5}
                ]]></programlisting>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>
                <programlisting><![CDATA[
                    int (&v)[3] = b;
                ]]></programlisting>                         
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para> 
                <programlisting><![CDATA[
                    int *v[5];
                ]]></programlisting>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>
                <programlisting><![CDATA[
                    int *fuggveny();
                ]]></programlisting>                         
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>
                <programlisting><![CDATA[
                    int *(*a)()= &f;
                ]]></programlisting>                         
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para> 
                <programlisting><![CDATA[
                    int (*v (int c)) (int a, int b)
                ]]></programlisting>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para> 
                <programlisting><![CDATA[
                    int (*(*z) (int)) (int, int)
                ]]></programlisting>                        
            </listitem>            
        </itemizedlist>            
<!--
       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>-->
    </section>                     


</chapter>                
