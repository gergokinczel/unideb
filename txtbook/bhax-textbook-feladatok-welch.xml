<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban a módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/polargen/ ">https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/polargen/ </link>             
        <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A program megvalósítja a megvalósíthatatlant. Random számokból még randomabb számokat készít, mindezt szorzás, összeadás
            kivonás négyzetre emelés, gyökvonás és logaritmusok segítségével. A C++ és Java verzió nem sokban tér el egymástól, 
            Javában az osztályok elkészítése valamivel kézenfekvőbb, sokra viszont nem használjuk, csupán egy logikai változót
            reprezentál, amely jelöli, hogy van e éppen tárolt szám.
        </para>                
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/gergokinczel/unideb/blob/master/binfa_c.c">https://github.com/gergokinczel/unideb/blob/master/binfa_c.c</link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A binfa egy bináris gráf, melyben a 0-ás elemek balra az 1-es elemek jobbra kerülnek egy gyökértől kiindulva.
            Bemeneti adatként egy 0 és 1-esekből álló számláncot kap az algoritmus, melyből sorban haladva a fába építi az elemeket,
            és minden olyan alkalommal, amikor beépít egy elemet a fába visszaugrik a gyökérre, egészen addig míg el nem fogynak
            a számok.           
        </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            Megoldás forrása: <programlisting language="c"><![CDATA[//posztorder
void kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	          max_melyseg = melyseg;

      kiir (elem->jobb_egy);
      kiir (elem->bal_nulla);
      for (int i = 0; i < melyseg; ++i)
            printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek, melyseg-1);

      --melyseg;
    }
}
            ]]></programlisting>
            <programlisting language="c"><![CDATA[//preorder
void kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	          max_melyseg = melyseg;
                
      for (int i = 0; i < melyseg; ++i)
            printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek, melyseg-1);
      kiir (elem->jobb_egy);
      kiir (elem->bal_nulla);

      --melyseg;
    }
}
            ]]></programlisting>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A fabejárás változtatása egy nagyon egyszerű művelet, csupán a kiírató algoritmusban kell a kiíratás helyét felcserélni:
            a preorder(gyökérkezdő) bejáráshoz a kiíratást a függvény újrahívása elé kell tenni, a posztorder(gyökérvégző) bejáráshoz
            pedig a kiíratást a függvény újrahívása után kell elhelyezni.
        </para>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/gergokinczel/unideb/blob/master/binfa2.cpp">https://github.com/gergokinczel/unideb/blob/master/binfa2.cpp</link>             
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A fa lényegében ugyanaz, mint C-ben viszont át van ültetve egy osztályba. Ennek az osztálynak van egy további Csomópont
            és Fa osztálya melyeket a fa építésénél és bejárásánál is egyaránt használnunk kell, és amelyek átláthatóbbá teszik
            a forráskódunkat. Így tehát rendelkezünk egy konstruktorral, mely megadja a fánk kezdetleges helyzetét, ugyanakkor
            meghadja a lehetőséget, hogy a jelenlegi csomópont változóval építhessük a fánkat. Ugyanakkor dekonstruktorunk is van,
            melyre szükség van mivel helyet foglalunk a memóriában a csomópontoknak.
        </para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/gergokinczel/unideb/blob/master/binfa_mutat.cpp">https://github.com/gergokinczel/unideb/blob/master/binfa_mutat.cpp</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Ebben a megoldásban az előzőhöz képest megváltozik a gyökér, mely a jobb és baloldali elemekhez hasonlóan már aggregációban
            lesz a fával, azaz mutatóként hozzuk létre. Lefoglaljuk a memóriacímét nem csak a jobb és bal elemeknek, hanem
            a gyökérnek is, ezzel konzisztensé téve a fa részeit.
            Kódrészletben alig történik változás:
            <programlisting language="C++"><![CDATA[
        //előtte       
protected       
    Csomopont gyoker 
--------------------------
        //utána
protected       
    Csomopont *gyoker 
            ]]></programlisting>
            <programlisting language="C++"><![CDATA[
        //előtte       
public:
   
    LZWBinFa ():fa (&gyoker)
    {
    }
--------------------------
        //utána
public:
                
    LZWBinFa ()
    {
    gyoker = new Csomopont();
    fa = gyoker;
    } ]]></programlisting>
        <programlisting language="C++"><![CDATA[
            //az összes előfordulásnál
        //előtte       
&gyoker
--------------------------
        //utána
gyoker
            ]]></programlisting>
        <programlisting language="C++"><![CDATA[
        //előtte       
    ~LZWBinFa ()
    {
        szabadit (gyoker.egyesGyermek ());
        szabadit (gyoker.nullasGyermek ());
    }
--------------------------
        //utána
    ~LZWBinFa ()
    {
        szabadit (gyoker->egyesGyermek ());
        szabadit (gyoker->nullasGyermek ());
    }
            ]]></programlisting>
        </para>
    </section>

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gist.github.com/gergokinczel/7ded0f06588bbee48117c53a596aa2e9">https://gist.github.com/gergokinczel/7ded0f06588bbee48117c53a596aa2e9</link>
        </para>
        <para>
            A mozgató szemantika lehetőséget nyújt arra, hogy egy t objektumot egy másik objektum felé "mozgassunk", a forrásait
            átvigyük. A binfánkban ezt arra használhatjuk és használjuk, hogy egy másolatot készítsünk a már felépített binfáról,
            majd azt újra kiírjuk. Erre a mozgatásra az <function>std::move</function> parancsot használjuk fel, mely nemcsak 
            binfa, hanem bármilyen más objektum mozgatását is megengedi. Az így lemásolt, eredeti fa által lefoglalt hely
            felszabadul a memóriából.
            <programlisting language="c++"><![CDATA[
            LZWBinFa binFa_uj = std::move ( binFa );
            ]]></programlisting>
        </para>

    </section>                     

</chapter>                
